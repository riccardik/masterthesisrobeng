# -*- coding: iso-8859-15 -*-

import json, socket
from random import randint, randrange
import random
import datetime
import time
import math
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import scipy


import numpy as np




def Rx(theta):
  return np.matrix([[ 1, 0           , 0           ],
                   [ 0, math.cos(theta),-math.sin(theta)],
                   [ 0, math.sin(theta), math.cos(theta)]])
 
def Ry(theta):
  return np.matrix([[ math.cos(theta), 0, math.sin(theta)],
                   [ 0           , 1, 0           ],
                   [-math.sin(theta), 0, math.cos(theta)]])
 
def Rz(theta):
  return np.matrix([[ math.cos(theta), -math.sin(theta), 0 ],
                   [ math.sin(theta), math.cos(theta) , 0 ],
                   [ 0           , 0            , 1 ]])

print("input file number")
#file_number = raw_input()
# file_number = "0927221920"
file_number = "0906191003"
# file_number = "0929110030"
#fname = "./new/Nuova Cartella/Completenewgood/log_status/data"+file_number+"minmax.txt"
fname = "./log_status/data"+file_number+".txt"

fname2 = "./log_status/data"+file_number+"predictedpos.txt"

fname = "./new/Nuova Cartella/Completenewgood/log_status/data"+file_number+".txt"
fname2 = "./new/Nuova Cartella/Completenewgood/log_status/data"+file_number+"predictedposdenorm.txt"


f = open(fname, "r")
f2 = open(fname2, "r")
Lines = f.readlines()
Lines2 = f2.readlines()
count = 0
arr = []
fig = plt.figure(figsize=(4,4))
ax = fig.add_subplot(111, projection='3d')

fig2 = plt.figure(figsize=(4,4))
ax2 = fig2.add_subplot(111, projection='3d')
ax.set_axis_off()
ax2.set_axis_off()

for j in range(0, len(Lines), 3):
        
        ax.cla()
        ax2.cla()
        read_line = json.loads(Lines[j])
        read_line2 = json.loads(Lines2[j])
        posv = read_line['arr_pos_v']
        posa = read_line['arr_pos_a']
        print(read_line['time_counter'])

        posv2 = read_line2['arr_pos_v_pred']
        x = []
        y = []
        z = []
        ax.quiver(-1, 0, 0, 3, 0, 0, color='#aaaaaa',linestyle='dashed')
        ax.quiver(0, -1, 0, 0,3, 0, color='#aaaaaa',linestyle='dashed')
        ax.quiver(0, 0, -1, 0, 0, 3, color='#aaaaaa',linestyle='dashed')


        for i in range(len(posv)):
                ax.scatter(posv[i][0], posv[i][1], posv[i][2], c="blue", s=20)
                x.append(posv[i][0])
                y.append(posv[i][1])
                z.append(posv[i][2])

                
        """ for i in range(len(posa)):
                ax.scatter(posa[i][0], posa[i][1], posa[i][2], c="red") """
        # ax.plot(x, y, z, color='b')
        x = []
        y = []
        z = []
        for i in range(len(posv2)):
               ax2.scatter(posv2[i][0], posv2[i][1], posv2[i][2], c="blue", s=20)
               x.append(posv2[i][0])
               y.append(posv2[i][1])
               z.append(posv2[i][2])
        # ax2.plot(x, y, z, color='b')

        
        ax.set_xlim(-5,5)

        ax.set_ylim(-5,5)

        ax.set_zlim(-5,5)
        ax2.set_xlim(-5,5)

        ax2.set_ylim(-5,5)

        ax2.set_zlim(-5,5)
        ax.title.set_text("Position of the point generated by the simulation, set "+file_number)

        ax2.title.set_text("Position of the point generated by the trained model, set "+file_number)  
        # ax.set_axis_off()
        # ax2.set_axis_off()


        plt.draw() 
        plt.pause(0.000001)
        # raw_input()


plt.show()





  
# Show plot
#plt.draw() 
#plt.pause(0.01) #is necessary for the plot to update for some reason
# c:/Python27/python.exe "C:\Users\rick\Desktop\SOFA_v19.06.99_custom_Win64_v8.1\share\sofa\examples\Tutorials\training2020\new\Nuova cartella\completenewgood\3dplotsidebyside.py"


#send position and desired rotation of the kidney randomly or not